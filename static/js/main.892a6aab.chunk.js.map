{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","country","setCountry","weather","setWeather","forecast","setForecast","className","result","timezone","sunrise","sunset","currentTime","Date","getUTCHours","sunriseUtc","sunsetUtc","newCurrentTime","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","res","json","cod","name","city","list","map","item","date","dt_txt","main","temp","temp_max","filter","i","Math","round","toDateString","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKACMA,EACG,mCADHA,EAEI,2CAuHKC,MApHf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEmBF,oBAAS,GAF5B,mBAEJG,EAFI,KAEKC,EAFL,OAGmBJ,oBAAS,GAH5B,mBAGJK,EAHI,KAGKC,EAHL,OAIqBN,oBAAS,GAJ9B,mBAIJO,EAJI,KAIMC,EAJN,KAgDX,OACI,qBAAKC,UAAYN,EAZE,SAACO,GACpB,IAAMC,EAAWD,EAAOC,SAAS,KAC3BC,EAA2B,IAAjBF,EAAOE,QACjBC,EAAyB,IAAhBH,EAAOG,OAEhBC,GAAc,IAAIC,MAAOC,cAAgBL,EACzCM,EAAc,IAAIF,KAAKH,GAASI,cAAgBL,EAChDO,EAAY,IAAIH,KAAKF,GAAQG,cAAgBL,EACnD,OAAQG,GAAeG,GAAcH,GAAeI,EAIvBC,CAAehB,GAAW,UAAW,YAAe,MAAjF,SACI,iCACI,qBAAKM,UAAU,aAAf,SACI,uBAAOW,KAAK,OACZX,UAAU,aACVY,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIrB,EAASqB,EAAEC,OAAOC,QACjCA,MAAOxB,EACPyB,WAnDD,SAAAH,GACE,UAAVA,EAAEI,KAA6B,KAAV1B,GAGpB2B,MAAM,GAAD,OAAI9B,EAAJ,sBAA0BG,EAA1B,+BAAsDH,IAC1D+B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAnB,GAGF,GAFAR,EAAS,IAES,QAAfQ,EAAOsB,IAAe,OAAO5B,GAAW,GAC3C,IAAMD,EAAU,CACZ8B,KAAMvB,EAAOwB,KAAKD,KAClB9B,QAASO,EAAOwB,KAAK/B,QACrBU,OAAQH,EAAOwB,KAAKrB,OACpBD,QAASF,EAAOwB,KAAKtB,QACrBD,SAAUD,EAAOwB,KAAKvB,UAEpBN,EAAUK,EAAOyB,KAAKC,KAAI,SAAAC,GAAI,MAAK,CACrCC,KAAMD,EAAKE,OACXnB,KAAMiB,EAAKhC,QAAQ,GAAGmC,KACtBC,KAAMJ,EAAKG,KAAKE,aAGpBpC,EAAWD,EAAQ,IACnBG,EAAYH,EAAQsC,QAAO,SAACpB,EAAEqB,GAAH,OAASA,EAAI,IAAM,MAC9CxC,EAAWD,WA8BTA,GACE,gCACI,8BACI,qBAAKM,UAAU,eAAf,SACI,sBAAKA,UAAU,WAAf,UAA2BN,EAAQ8B,KAAnC,KAA2C9B,EAAQA,eAI3D,qBAAKM,UAAU,cAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAWJ,EAAQe,OACxB,sBAAKX,UAAU,OAAf,UACKoC,KAAKC,MAAqB,GAAfzC,EAAQoC,MAAa,GADrC,WAGA,qBAAKhC,UAAU,UAAf,SACKJ,EAAQe,OAEb,qBAAKX,UAAU,OAAf,UAAuB,IAAIM,MAAOgC,sBAI1C,qBAAKtC,UAAU,WAAf,SACI,qBAAKA,UAAU,YAAf,SACKF,EAAS6B,KAAI,SAACC,EAAMW,GACjB,OAAQ,sBAAKvC,UAAU,UAAf,UACI,qBAAKA,UAAU,OAAf,SACC4B,EAAKC,OAEN,qBAAK7B,UAAW4B,EAAKjB,OACrB,8BACCiB,EAAKjB,OAEN,sBAAKX,UAAU,OAAf,UACCoC,KAAKC,MAAkB,GAAZT,EAAKI,MAAa,GAD9B,aAR0BO,aAkB7C,GAAX7C,GACE,sBAAKM,UAAU,eAAf,UACI,qBAAKA,UAAU,OAAf,UAAuB,IAAIM,MAAOgC,iBAClC,oBAAItC,UAAU,QAAd,yBACA,gEACA,sHCtGTwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BZ,K","file":"static/js/main.892a6aab.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nconst api = {\n    key: \"c8cde683f491660dd70e5ceef4f25741\",\n    base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n    const [query, setQuery] = useState('');\n    const [country, setCountry] = useState(false);\n    const [weather, setWeather] = useState(false);\n    const [forecast, setForecast] = useState(false);\n\n    const search = e => {\n        if(e.key === \"Enter\" && query !== ''){\n            \n            // fetch weather and forecast data\n            fetch(`${api.base}forecast?q=${query}&units=metric&APPID=${api.key}`)\n            .then(res => res.json())\n            .then(result => {\n                setQuery('');\n\n                if(result.cod === \"404\") return setCountry(false);\n                const country = {\n                    name: result.city.name,\n                    country: result.city.country,\n                    sunset: result.city.sunset,\n                    sunrise: result.city.sunrise,\n                    timezone: result.city.timezone,\n                };\n                const weather = result.list.map(item => ({\n                    date: item.dt_txt,\n                    type: item.weather[0].main,\n                    temp: item.main.temp_max\n                }));\n\n                setWeather(weather[0]);\n                setForecast(weather.filter((e,i) => i % 8 === 7));\n                setCountry(country);\n            });\n        }\n    }\n\n    // Return true when the sun is up\n    const newCurrentTime = (result) => {\n        const timezone = result.timezone/3600, \n              sunrise = result.sunrise * 1000, \n              sunset = result.sunset * 1000;\n\n        const currentTime = new Date().getUTCHours() + timezone;\n        const sunriseUtc =  new Date(sunrise).getUTCHours() + timezone; \n        const sunsetUtc = new Date(sunset).getUTCHours() + timezone;\n        return (currentTime >= sunriseUtc && currentTime <= sunsetUtc);\n    }\n\n    return (\n        <div className={(country) ? (newCurrentTime(country) ? 'app day': 'app night') : 'app'}>\n            <main>\n                <div className=\"search-box\">\n                    <input type=\"text\"\n                    className=\"search-bar\" \n                    placeholder=\"Search...\"\n                    onChange={e => setQuery(e.target.value)}\n                    value={query}\n                    onKeyPress={search}\n                    />\n                </div>\n\n                { country &&\n                    <div>\n                        <div>\n                            <div className=\"location-box\">\n                                <div className=\"location\">{country.name}, {country.country}</div>\n                            </div>\n                        </div>\n\n                        <div className=\"weather-box\">\n                            <div className=\"container\">\n                                <div className={weather.type}></div>\n                                <div className=\"temp\">\n                                    {Math.round(weather.temp * 10) / 10}°C\n                                </div>\n                                <div className=\"weather\">\n                                    {weather.type}\n                                </div>\n                                <div className=\"date\">{new Date().toDateString()}</div>\n                            </div>\n                        </div>\n\n                        <div className=\"forecast\">\n                            <div className=\"container\">\n                                {forecast.map((item, index) => {\n                                    return  <div className=\"day one\" key={index}> \n                                                <div className='date'>\n                                                {item.date} \n                                                </div>\n                                                <div className={item.type}></div>\n                                                <div>\n                                                {item.type} \n                                                </div>\n                                                <div className='temp'>\n                                                {Math.round(item.temp * 10) / 10}°C\n                                                </div>      \n                                            </div>\n                                })}\n                            </div>\n                        </div>\n                    </div>\n                }\n\n                { country == false && \n                    <div className=\"appContainer\">\n                        <div className=\"date\">{new Date().toDateString()}</div>\n                        <h1 className=\"title\">Weather App</h1>\n                        <h2>Enter a country, city or state</h2>\n                        <p>The app will display the current weather, 5 day forecast and day/night cycle</p>\n                    </div>\n                }\n            </main>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}